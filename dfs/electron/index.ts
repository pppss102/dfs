import { ChildProcess, spawn } from "child_process";
import { app, BrowserWindow, clipboard, dialog, ipcMain } from "electron";
import path from "path";
import installExtension, {
  REACT_DEVELOPER_TOOLS,
} from "electron-devtools-installer";
import { sleep } from "@/lib/utils";
import { ChannelCredentials } from "@grpc/grpc-js";
import { UiClient } from "@/types/rpc/uiservice.grpc-client";
import { randomUUID, UUID } from "crypto";
import { NodeServiceHandler } from "@/types/wrap/NodeServiceHandler";
import { access } from "fs/promises";
import { LogCategory } from "@/types/rpc/uiservice";
import log from "electron-log/main";

import { LogMessage } from "electron-log/src";
 

import noFoo from './custom-rules/no-console-log';
export const rules = {
  'no-foo': noFoo,
};

export const configs = {
  recommended: {
    parser: '@typescript-eslint/parser',
    plugins: ['my-eslint-plugin'],
    rules: {
      'my-eslint-plugin/no-foo': 'error',
    },
  },
};


// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
const NULL_UUID = "00000000-0000-0000-0000-000000000000";

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

type LogLevel = "error" | "warn" | "info" | "verbose" | "debug" | "silly";
const levelToCategory = new Map<LogLevel, LogCategory>([
  ["error", LogCategory.Error],
  ["warn", LogCategory.Error],
  ["info", LogCategory.Error],
  ["debug", LogCategory.Error],
]);

const isDev = !app.isPackaged || process.env.NODE_ENV === "development";
let grpcClient: UiClient | undefined = undefined;
let backendProcess: ChildProcess | undefined = undefined;
log.hooks.push((message: LogMessage) => {
  if (grpcClient != null) {
    NodeServiceHandler.logMessage(
      {
        category: levelToCategory.get(message.level) ?? LogCategory.Info,
        message: JSON.stringify(message.data),
      },
      grpcClient,
    );
  }
  return message;
});
log.initialize({ spyRendererConsole: true });

const createWindow = async (): Promise<void> => {
  const pipe: UUID = !isDev ? randomUUID() : NULL_UUID;
  console.log("hi: " + pipe.toString());
  if (!isDev) {
    const exePath = path.join(
      app.isPackaged ? process.resourcesPath : path.join(__dirname, "..", ".."),
      "assets",
      "node.exe",
    );
    console.log("hi: " + exePath);
    backendProcess = spawn(exePath, [pipe, process.pid.toString()], {
      detached: true,
      stdio: "inherit",
    });
  }

  await waitForPipe(pipe, 20000);
  grpcClient = new UiClient(
    `unix:\\\\.\\pipe\\${pipe}`,
    ChannelCredentials.createInsecure(),
  );
  NodeServiceHandler.register(grpcClient, ipcMain);

  Object.assign(console, log.functions);

  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      contextIsolation: true,
      nodeIntegration: false,
      sandbox: true,
    },
  });

  // and load the index.html of the app.
  await mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  mainWindow.webContents.openDevTools({ mode: "undocked" });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

app.on("activate", async () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    try {
      await createWindow();
    } catch (e) {
      log.error(e);
      app.quit();
    }
  }
});

app.on("before-quit", async () => {
  try {
    if (grpcClient != null) await NodeServiceHandler.shutdown({}, grpcClient);
  } catch (e) {
    log.info("error: " + e);
    app.quit();
  }
  await sleep(5000);
  backendProcess?.kill();
  backendProcess = undefined;
});

ipcMain.handle("write-clipboard", (_event, text: string) => {
  if (typeof text === "string") {
    clipboard.writeText(text);
  }
});

app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

ipcMain.handle("select-file", async () => {
  const result = await dialog.showOpenDialog({
    properties: ["openFile"],
  });

  return result.canceled ? null : result.filePaths[0];
});

ipcMain.handle("select-folder", async () => {
  const result = await dialog.showOpenDialog({
    properties: ["openDirectory"],
  });

  return result.canceled ? null : result.filePaths[0];
});

if (isDev) {
  app.whenReady().then(async () => {
    await installExtension(REACT_DEVELOPER_TOOLS)
      .then((name) => log.info(`Added Extension:  ${JSON.stringify(name)}`))
      .catch((err) => log.error("An error occurred: ", err));
  });
}

async function waitForPipe(pipePath: string, timeoutMs = 5000): Promise<void> {
  const start = Date.now();
  const fullPath = `\\\\.\\pipe\\${pipePath}`;

  while (true) {
    try {
      await access(fullPath);

      return; // Pipe exists!
    } catch {
      if (Date.now() - start > timeoutMs) {
        throw new Error(`Timed out waiting for pipe: ${pipePath}`);
      }
      await new Promise((res) => setTimeout(res, 100));
    }
  }
}
